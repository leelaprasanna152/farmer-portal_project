const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const signup = async (req, res) => {
    const { name, email, password, address, phone } = req.body;
    try {
      const vendor = await User.findOne({ email });
        if (vendor) {
            return res.status(400).json({ msg: 'User already exists' });
        }
        const hashedPassword = await bcrypt.hash(password, 12);
        const createdUser = new User({
            name,
            email,
            password: hashedPassword,
            address,
            phone
        });
        await createdUser.save();
        vendor.vendors.push(createdUser);
        res.status(201).json({ msg: 'User created successfully' });
    } catch (error) {
        res.status(500).json({ msg: 'Server error' });
    }
}


const login = async (req, res, next) => {
    const { email, password } = req.body;
    try {
        const existingUser = await User.findOne({ email });
        if (!existingUser) {
            return res.status(400).json({ msg: 'Invalid credentials' });
        }
        const isPasswordCorrect = await bcrypt.compare(password, existingUser.password);
        if (!isPasswordCorrect) {
            return res.status(400).json({ msg: 'Invalid credentials' });
        }
        const token = jwt.sign(
            { email: existingUser.email, id: existingUser._id },  // âœ… Using _id for consistency
            'supersecret_dont_share',
            { expiresIn: '1h' }
        );
        res.status(200).json({ result: existingUser, token });
    } catch (error) {
        res.status(500).json({ msg: 'Server error' });
    }
};

const getAllUsers = async (req, res) => {
    try {
        const users = await User.find().populate('products');
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ msg: 'Server error' });
    }
}

// const getUserById = async (req, res) => {
//     const id = req.params.id;
//     try {
//         const user = await User.findById(id);  
//         if (!user) {
//             return res.status(404).json({ msg: 'User not found' });
//         }
//         res.status(200).json(user);
//     } catch (error) {
//         res.status(500).json({ msg: 'Server error' });
//     }
//     res.json({ user: user.toObject({ getters: true }) });
// }


module.exports.signup = signup;
module.exports.login = login;
module.exports.getAllUsers = getAllUsers;
// module.exports.getUserById = getUserById;
  
